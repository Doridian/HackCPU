#ifndef OPCODES_H_INCLUDED
#define OPCODES_H_INCLUDED

enum INSTRUCTION {
    // Basic
    I_MOV = 0,
    I_MOV32,
    I_PUSH,
    I_POP,
    I_PUSH32,
    I_POP32,
    I_NOP,
    // 16-bit Arith
    I_ADD,
    I_SUB,
    I_MUL,
    I_DIV,
    I_MOD,
    I_SHL,
    I_LSHR,
    I_ASHR,
    I_MULU,
    I_DIVU,
    // 16-bit Logic
    I_XOR,
    I_OR,
    I_AND,
    I_NOT,
    I_NOR,
    I_NAND,
    // Compare
    I_CMP,
    I_CMPS,
    I_CMP32,
    I_CMP32S,
    I_CMPF,
    // Flow
    I_JMP,
    I_JGE,
    I_JLE,
    I_JE,
    I_JNE,
    I_JG,
    I_JL,
    I_JZ,
    I_JNZ,
    I_CALL,
    I_CGE,
    I_CLE,
    I_CE,
    I_CNE,
    I_CG,
    I_CL,
    I_CZ,
    I_CNZ,
    I_RETN,
    // Special
    I_INT,
    I_SETIH,
    I_HALT,
    I_RESET,
    I_TRAP,
    I_ENCOFF,
    I_ENCON,
    I_PUSHREG,
    I_POPREG,
    I_ENCRETN,
    // 32-bit Integer Arithmetic
    I_ADD32,
    I_SUB32,
    I_MUL32,
    I_DIV32,
    I_MOD32,
    I_SHL32,
    I_LSHR32,
    I_ASHR32,
    I_MULU32,
    I_DIVU32,
    // 32-bit Float Arithmetic
    I_ADDF,
    I_SUBF,
    I_MULF,
    I_DIVF,
};

enum ITYPE {
    IT_RRVV = 0,
    IT_N,
    IT_RRVV32,
};

static uint8_t ITYPES[] = {
    // Basic
    IT_RRVV,
    IT_RRVV32,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV32,
    IT_RRVV32,
    IT_N,
    // 16-bit Arith
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    // 16-bit Logic
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    // Compare
    IT_RRVV,
    IT_RRVV,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    // Flow
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    IT_RRVV,
    // Special
    IT_RRVV,
    IT_RRVV,
    IT_N,
    IT_N,
    IT_N,
    IT_N,
    IT_N,
    IT_N,
    IT_N,
    IT_N,
    // 32-bit Integer Arithmetic
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    // 32-bit Float Arithmetic
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
    IT_RRVV32,
};

#endif // OPCODES_H_INCLUDED
